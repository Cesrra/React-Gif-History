{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GigExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","oldCategories","type","value","onChange","target","getGifs","category","a","fetch","encodeURI","response","json","data","gifs","map","img","id","title","url","images","downsized_medium","console","error","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GigExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMA2BeA,EAxBK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAClB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAQA,OACI,sBAAMC,SARQ,SAACC,GACfA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAa,OAAKP,GAAL,mBAAoBO,OAC/CN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAAU,SAAAP,GAAC,OAAIF,EAAcE,EAAEQ,OAAOF,a,+BCjBzCG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,sEAEA,uCACA,mCACD,GAJC,SAKQC,MAAM,GAAD,OAHb,uCAGa,cAAgBC,UAAUH,GAA1B,kBADd,GACc,oBAFb,qCAHA,cAKTI,EALS,gBAMQA,EAASC,OANjB,uBAMPC,EANO,EAMPA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAKH,EAAII,OAAOC,iBAAiBF,QAX1B,kBAcRL,GAdQ,kCAgBfQ,QAAQC,MAAR,MAhBe,0DAAH,sDCiBLC,EAdK,SAAC,GAAkB,IAAjBN,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACzB,OACI,sBAAKM,UAAU,2CAAf,UACI,qBAAKC,IAAKP,EAAKQ,IAAKT,IACpB,6BAAKA,QCsBFU,EAxBC,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SACd,ECHwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BoB,KAAM,GACNgB,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACN1B,EAAQC,GACH0B,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLlB,KAAMqB,EACNL,SAAS,MAEf,WAEX,CAACtB,IAEGuB,EDfwBM,CAAa7B,GAAhCa,EAAZ,EAAOP,KAAagB,EAApB,EAAoBA,QAEpB,OACI,qCACK,6BAAKtB,IAELsB,GAAW,oBAAIJ,UAAU,mCAAd,8BAEZ,qBAAKA,UAAU,YAAf,SAEQL,EAAOL,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEQ/BoB,EArBM,WACjB,MAAoC5C,mBAAS,CAAC,WAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KACA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ8C,EAAWvB,KAAI,SAACR,GAAD,OACX,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCTjCgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cdccc32d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst CategoryAdd = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleAdd = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 3){\n            setCategories(oldCategories => [inputValue, ...oldCategories]);\n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit={handleAdd}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={e => setInputValue(e.target.value)}\n            />\n        </form>\n    );\n}\n\nCategoryAdd.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default CategoryAdd;\n\n","export const getGifs = async (category) => {\n    try {\n        const apiUrl = 'https://api.giphy.com/v1/gifs/search';\n        const apiKey = 'vV7JjQhMXQHb5KWNF0epDMYqfG7nDc0a';\n        const limit = 10;\n        const response = await fetch(`${apiUrl}?q=${encodeURI(category)}&limit=${limit}&api_key=${apiKey}`);\n        const { data } = await response.json();\n        const gifs = data.map(img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images.downsized_medium.url,\n            }\n        });\n        return gifs;\n    } catch (error) {\n        console.error(error);\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeInUp\">\n            <img src={url} alt={title} />\n            <h4>{title}</h4>\n        </div>\n    );\n}\n\nGifGridItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n}\n\nexport default GifGridItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({category}) => {\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n             <h3>{category}</h3>\n\n            {loading && <h4 className=\"animate__animated animate__flash\">Loading Gifs ...</h4>}\n\n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItem key={img.id} {...img} />\n                    ))\n                }\n            </div>        \n        </>\n    );\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}\n\nexport default GifGrid;\n","import {useEffect, useState} from 'react';\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n   \n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setTimeout(() => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n                },1500);\n            });\n    }, [category]);\n\n    return state;\n}\n","import React, { useState } from 'react'\nimport CategoryAdd from './components/CategoryAdd';\nimport GifGrid from './components/GifGrid';\n\nconst GigExpertApp = () => {\n    const [categories, setCategories] = useState(['Naruto']);\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <CategoryAdd setCategories={setCategories} />\n            <hr />\n            <ol>\n                {\n                    categories.map((category) => (\n                        <GifGrid \n                            key={category}\n                            category={category} \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GigExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GigExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}